<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <title>Phaser - Making your first game, part 9</title>
    <script type="text/javascript" src="js/phaser.min.js"></script>
    <style type="text/css">
    body {
        margin: 0;
    }
    </style>
</head>
<body>
<%= srand(Time.now.to_i) %>
    <script type="text/javascript">
    var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: IntroCreate, update: update });

    function preload() {
        game.load.bitmapFont('desyrel', '<%= asset_path 'desyrel.png' %>', '<%= asset_path 'desyrel.xml' %>');
        game.load.image('Street', '<%= asset_path 'Background.png' %>');
        game.load.image('background', '<%= asset_path 'start_Background.png' %>');
        game.load.image('ground',  '<%= asset_path 'platform.png' %>');
        game.load.image('popup',  '<%= asset_path 'Black_button.png' %>');
        game.load.image('round',  '<%= asset_path 'round.png' %>');
        game.load.image('bubble', '<%= asset_path 'bubble.png' %>');
        game.load.image('star', '<%= asset_path 'star.png' %>');
        game.load.image('ball',  '<%= asset_path 'ball-tlb.png' %>');
        game.load.image('diamond', '<%= asset_path 'diamond.png' %>');
        game.load.image('car', '<%= asset_path 'car.png' %>');
        game.load.image('Bar', '<%= asset_path 'Bar.png' %>');
        game.load.spritesheet('dude', '<%= asset_path 'dude.png' %>', 32, 48);
        game.load.spritesheet('button-start','<%= asset_path 'button-start.png' %>', 401, 143)

    }
    var car;
    var platforms;
    var cursors;
    var startBackground;
    var speed = 0;
    var directionSpeed;
    var dudes;
    var startButton;
    var start;
    var score = 0;
    var scoreText;
    var nitroText;
    var msgText;
    var nitroLeft = 100;
    var nitro;
    var dudes;
    var diamonds;
    var stops;
    var timerText;
    var time;
    var stars;
    var Popup;
    var allQuestions = <%= raw @questions.to_json %>;
    var allAnswers = <%= raw @answers.to_json %>;
    var allCategories = <%= raw @categories.to_json %>;
    var orderOfQuestions = <%= raw (0..@answers.length-1).to_a.shuffle %>;
    var currentQuestion = 0;
    var correctAnswer;
    var questionText;
    var blockAnswer;
    var answerText = [];
    var normalStyle; 
    var hoverStyle;
    var correctStyle;

    function IntroCreate(){
      start = false;
      startBackground = game.add.sprite(0,0,'background');
      startButton = game.add.button(200,450,'button-start',IntroDestroy,this,1,0,2);
      game.add.bitmapText(game.world.width/2, 50, 'desyrel', 'Rules On Wheels', 40);
      game.add.bitmapText(100, 150, 'desyrel', 'Click Start to Begin!', 36);
    }

    function IntroDestroy(){     
        startButton.destroy();
        create();
    }

    function create() {

    //  We're going to be using physics, so enable the Arcade Physics system
    game.physics.startSystem(Phaser.Physics.ARCADE);

    //  A simple background for our game
    game.add.sprite(0, 0, 'Street');

    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = game.add.group();

    //  We will enable physics for any object that is created in this group
    platforms.enableBody = true;

    // Here we create the ground.
    var ground = platforms.create(0, game.world.height - 23, 'ground');

    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    ground.scale.setTo(2, 2);

    //  This stops it from falling away when you jump on it
    ground.body.immovable = true;


    //  Now let's create two ledges
    var ledge = platforms.create(775, 0, 'ground');
    ledge.scale.setTo(5,25);
    ledge.body.immovable = true;

    ledge = platforms.create(0, 0, 'ground');
    ledge.scale.setTo(2,2);
    ledge.body.immovable = true;

    ledge = platforms.create(0, 0, 'ground');
    ledge.scale.setTo(0.05,22);
    ledge.body.immovable = true;

    ledge = platforms.create(120, 150, 'ground');
    ledge.scale.setTo(0.3,3.5);
    ledge.body.immovable = true;


    ledge = platforms.create(120, 370, 'ground');
    ledge.scale.setTo(0.3,3.5);
    ledge.body.immovable = true;

    ledge = platforms.create(380, 150, 'ground');
    ledge.scale.setTo(0.3,3.5);
    ledge.body.immovable = true;


    ledge = platforms.create(380, 370, 'ground');
    ledge.scale.setTo(0.3,3.5);
    ledge.body.immovable = true;


    ledge = platforms.create(690, 150, 'ground');
    ledge.scale.setTo(0.3,3.5);
    ledge.body.immovable = true;


    ledge = platforms.create(690, 370, 'ground');
    ledge.scale.setTo(0.3,3.5);
    ledge.body.immovable = true;


    ledge = platforms.create(570, 290, 'round');
    ledge.scale.setTo(0.1,0.1);
    ledge.body.immovable = true;

    //Bar image
    ledge = platforms.create(0, 0, 'Bar');
    ledge.scale.setTo(1,0.35);
    ledge.body.immovable = true;


    // The score
    scoreText = game.add.bitmapText(10, 0, 'desyrel', 'Score: 0', 32);
    // game.add.text(20, 5, 'Score: 0', { fontSize: '32px', fill: '#FFFFFF',  });

    // Nitrous
    nitroText = game.add.bitmapText(635, 0, 'desyrel', 'Nitro: Full', 32);
    // game.add.text(420, 5, 'Nitro: 60', { fontSize: '32px', fill: '#FFFFFF',  });
    msgText = game.add.bitmapText(430, 0, 'desyrel', 'Go Crazy!!', 34);
    msgText.visible = false;
    //  Our controls.
    cursors = game.input.keyboard.createCursorKeys();

    // Examiners

    dudes = game.add.group();

    //  We will enable physics for any star that is created in this group
    dudes.enableBody = true;

    // Questions
    stars = game.add.group();

    //  We will enable physics for any star that is created in this group
    stars.enableBody = true;


    diamonds = game.add.group();

    //  We will enable physics for any star that is created in this group
    diamonds.enableBody = true;

    stops = game.add.group();

    stops.enableBody = true;
    stops.create(30,70,'bubble');
    stops.create(30,510,'bubble');
    stops.create(700,70,'bubble');
    stops.create(700,510,'bubble');
    stops.create(700,280,'bubble');
    stops.sort();
    createDude();

    // The car and its settings
    car = game.add.sprite(40, game.world.height - 250, 'car');
    car.scale.setTo(0.1,0.1);
    //  We need to enable physics on the car
    game.physics.arcade.enable(car);

    //  car physics properties. Give the little guy a slight bounce.

    car.body.collideWorldBounds = true;

    car.body.collideWorldBounds = true;

    car.anchor.setTo(0.3, 0.5);

    createPopup();

    start = true;

    setInterval(updateNitro,100)

}

function update() {


    if(!start)
        return;
    //  Collide the car and the stars with the platforms
    game.physics.arcade.collide(car, platforms);
    game.physics.arcade.collide(dudes, platforms);

    //  Checks to see if the car overlaps with any of the stars, if he does call the collectStar function
    game.physics.arcade.overlap(car, dudes , collectDude, null, this);
    game.physics.arcade.overlap(car, diamonds, collectDiamond, null, this);
    game.physics.arcade.overlap(car, stars, collectStar, null, this);

    car.body.velocity.x = 0;
    car.body.velocity.y = 0;
    car.body.angularVelocity = 0;
    var move = false;
    var reverse = false;
    car.angle -= 90;

    directionSpeed = 200;


    if(game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR) && nitroLeft > 0 && game.input.keyboard.isDown(Phaser.Keyboard.UP) && Popup.visible == false){
        nitro = true;
    }else{
        nitro = false;
    }

    if (game.input.keyboard.isDown(Phaser.Keyboard.UP) && Popup.visible == false)
    {
        if(speed < 450)
            speed+=5;
        if(nitro && speed < 600)
            speed+=10
        move = true;
    }else if (game.input.keyboard.isDown(Phaser.Keyboard.DOWN) && Popup.visible == false)
    {
        if(speed > -200)
            speed-=5;
        if(speed > 0)
            speed -=10
        reverse = true;
    }else{
        if(speed > 0)
            speed -=10
        if(speed < 0)
            speed +=5
    }

    if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT) && Popup.visible == false)
    {
        if(move){
            car.body.angularVelocity = -directionSpeed;
        }else if(reverse){
            car.body.angularVelocity = +directionSpeed;
        }
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT) && Popup.visible == false)
    {
        if(move){
            car.body.angularVelocity = +directionSpeed;
        }else if(reverse){
            car.body.angularVelocity = -directionSpeed;
        }    
    }

    game.physics.arcade.velocityFromAngle(car.angle, speed, car.body.velocity);
    

    car.angle += 90;

}

function createPopup(){
    Popup = game.add.sprite(game.world.centerX, game.world.centerY+30, 'popup');
    Popup.alpha = 0.8;
    Popup.anchor.set(0.5);
    Popup.inputEnabled = true;
    normalStyle = { font: "32px Arial", fill: "#ffffff", wordWrap: true, wordWrapWidth: Popup.width, align: "center" };
    hoverStyle = { font: "36px Arial", fill: "#f2d000", wordWrap: true, wordWrapWidth: Popup.width, align: "center" };
    correctStyle = { font: "38px Arial", fill: "#458B00", wordWrap: true, wordWrapWidth: Popup.width, align: "center" };
    //Popup.input.enableDrag();

    //  And click the close button to close it down again
    Popup.scale.setTo(1.5,1.1);
    answerText[0] = game.add.text(-220, -50, "Answer 1", normalStyle);
    answerText[0].inputEnabled = true;
    answerText[0].events.onInputDown.add(GiveAnswer, this);
    answerText[0].input.priorityID = 1;
    answerText[0].input.useHandCursor = true;
    answerText[0].events.onInputOver.add(AnswerHoverIn, this);
    answerText[0].events.onInputOut.add(AnswerHoverOut, this);
    Popup.addChild(answerText[0]);

    answerText[1] = game.add.text(-220, +50, "Answer 2", normalStyle);
    answerText[1].inputEnabled = true;
    answerText[1].events.onInputDown.add(GiveAnswer, this);
    answerText[1].input.priorityID = 1;
    answerText[1].input.useHandCursor = true;
    answerText[1].events.onInputOver.add(AnswerHoverIn, this);
    answerText[1].events.onInputOut.add(AnswerHoverOut, this);
    Popup.addChild(answerText[1]);

    answerText[2] = game.add.text(0, -50, "Answer 3", normalStyle);
    answerText[2].inputEnabled = true;
    answerText[2].events.onInputDown.add(GiveAnswer, this);
    answerText[2].input.priorityID = 1;
    answerText[2].input.useHandCursor = true;
    answerText[2].events.onInputOver.add(AnswerHoverIn, this);
    answerText[2].events.onInputOut.add(AnswerHoverOut, this);
    Popup.addChild(answerText[2]);

    answerText[3] = game.add.text(0, +50, "Answer 4", normalStyle);
    answerText[3].inputEnabled = true;
    answerText[3].events.onInputDown.add(GiveAnswer, this);
    answerText[3].input.priorityID = 1;
    answerText[3].input.useHandCursor = true;
    answerText[3].events.onInputOver.add(AnswerHoverIn, this);
    answerText[3].events.onInputOut.add(AnswerHoverOut, this);
    Popup.addChild(answerText[3]);

    questionText = game.add.bitmapText(0, -200, 'desyrel', 'Question', 32);
    //game.add.text(0, -200, " Question " + '', style);
    questionText.anchor.set(0.5);
    Popup.addChild(questionText);
    NextQuestion()
    Popup.visible = false;
}

function NextQuestion(){
    blockAnswer = false;
    questionText.text = allQuestions[orderOfQuestions[currentQuestion]];
    for(i = 0; i < 4; i ++){
        answerText[i].text = '';
        answerText[i].setStyle(normalStyle);
    }
    correctAnswer = parseInt(Math.random()*4);
    answerText[correctAnswer].text = allAnswers[orderOfQuestions[currentQuestion]];
    var r;
    for(i = 0; i < 4; i++){
        if(i != correctAnswer){
            while(true){
                r = parseInt(Math.random()*allAnswers.length);
                var duplicate = false;
                for(j = 0; j < 4; j++){
                    if(allAnswers[r] == answerText[j].text || allCategories[r] != allCategories[correctAnswer])
                        duplicate = true;
                }
                if(!duplicate)
                    break;
            }
            answerText[i].text = allAnswers[r];
        }
    }
    currentQuestion++;
    if(currentQuestion >= allQuestions.length)
        currentQuestion = 0;
}

function GiveAnswer(answer){
    if(blockAnswer)
        return;
    blockAnswer = true;
    var old = score;
    if(answer.text == allAnswers[orderOfQuestions[currentQuestion-1]])
        score += 100;
    answerText[correctAnswer].setStyle(correctStyle);
    scoreText.text = 'Score: ' + score;
    setTimeout(NextQuestion,2000-(10*(score-old)))
}

function AnswerHoverIn(answer){
    if(blockAnswer)
        return;
    answer.setStyle(hoverStyle)
}

function AnswerHoverOut(answer){
    if(blockAnswer)
        return;
    answer.setStyle(normalStyle)
}

function collectDude (car, star) {
    dudes.getChildAt(0).destroy();
    createDiamond();
    //createStar();
    startTimer();
}

function hidePopup(){
    Popup.visible = false;
}

function updateNitro(){
    msgText.visible = false;
    if(nitro){
        nitroLeft -= 1;
        nitroText.text = 'Nitro: '+ nitroLeft+'%'
        msgText.visible = true;
    }
}

function collectDiamond (car, star){
    diamonds.getChildAt(0).destroy();
    if(stars.countLiving() != 0)
        stars.getChildAt(0).destroy();
    if(time > 0)
        Popup.visible = true;
    score += 10*time;
    scoreText.text = 'Score: ' + score;
    //time = 0;
    //timerText.text = '';
}

var random;
function createDude(){
    random = parseInt(Math.random()*5);
    var child;
    child = stops.getChildAt(random);
    dudes.create(child.x+15,child.y+5,'dude',4);
}

function createDiamond(){
    var newRandom = parseInt(Math.random()*5);
    while(random == newRandom){
        newRandom = parseInt(Math.random()*5);;
    }
    var child;
    child = stops.getChildAt(newRandom);
    diamonds.create(child.x+15 ,child.y+15,'diamond');
}

function createStar(){
    stars.create(game.world.width/2 - 30,270,'star');
    stars.create(game.world.width/2 - 30,111,'star');
}

function collectStar(car,star){
    star.destroy()
    Popup.visible = true;
}

function startTimer(){
    timerText = game.add.bitmapText(180, 0, 'desyrel', '', 33);
    //game.add.text(260, 16, '', { fontSize: '32px', fill: '#000' });
    time = 30;
    updateTimer();
}

function updateTimer(){
    if(time > 0){
        time -= 1;
        timerText.text = 'Time Left: ' + time;
        setTimeout(updateTimer,1000);
    }else{
        timerText.text = '';
        createDude();
        hidePopup();
    }
}

</script>
</body>
</html>