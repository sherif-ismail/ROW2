<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <script type="text/javascript" src="js/phaser.min.js"></script>
    <style type="text/css">
    body {
        margin: 0;
    }
    </style>
</head>
<body>
      <header>
<div class="row full-width center-parent" id="header2" >
  <div class="small-5 columns small-center">
    <h1 class="" style="font-size:50px">Rules On Wheels</h1>
  </div>
  <div class="small-5 columns small-centered" style:"vertical-align: bottom">
  <div class="top-bar-right" style:"vertical-align: bottom">
    <ul class="menu" style:"vertical-align: bottom">
      <% if logged_in? %>
       <li><a class="" href=<%=root_path%> id="playButton"><i class="icon-home"></i>Home</a></li>
        <li><a class="" href=<%=game_path%>  id="playButton"><i class="icon-gamepad"></i>Play</a></li>
        <li><a class="" href=<%=quiz_path%>  id="playButton"><i class="icon-gamepad"></i>Quiz</a></li>
        <li><%= link_to "Log out", logout_path, method: "delete", id: "playButton", class: "icon-cancel-squared"%></li>
    <% else %>
        <li><a class="" href=<%=root_path%> id="playButton"><i class="icon-home"></i>Home</a></li>
        <li><a class="" href=<%=login_path%> id="playButton"><i class="icon-lock"></i>Log in</a></li>
        <li><a class="" href=<%=signup_path%> id="playButton"><i class="icon-user-add"></i>Sign up</a></li>
    <% end %>
    </ul>
  </div>
  </div>
</div>
  </header>
<div class="row expanded section" >
  <div class="large-12 columns small-centered" id="game">

  </div>
</div>
<div class="row footer section expanded" id="footer">
  <div class="large-12 columns">
    <p>Powered by the <b>GWAP</b> Cluster of the GUC</p>
  </div>
</div>
    <script type="text/javascript">
    WebFontConfig = {
    google: { families: [ 'Lobster::latin' ] }
    };
    (function() {
    var wf = document.createElement('script');
    wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +
      '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
    wf.type = 'text/javascript';
    wf.async = 'true';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(wf, s);
    })();
    </script>
    <script type="text/javascript">
    <%= srand(Time.now.to_i) %>
    var game = new Phaser.Game(1000, 600, Phaser.AUTO, 'game', { preload: preload, create: doNothing, update: update });
    setTimeout(IntroCreate,5000);
    var sessionTime = 900;
    var sessionText;
    var sessionTimer;
    var examTimer;
    var loading;
    var loadingText;
    var loadingFrame = 3;
    var loadingCounter = 0;
    var car;
    var bar;
    var platforms;
    var lines;
    var cursors;
    var startBackground;
    var speed = 0;
    var directionSpeed;
    var startButton;
    var start;
    var score = 0;
    var scoreText;
    var speedText;
    var msgText;
    var nitroLeft = 100;
    var nitro;
    var collected = true;
    var source = true;
    var isGameOver = false;
    var stops = ["25,110","820,110","100,590","950,590","460,350","85,345","850,350"];
    var slowAreas = ["57,85,176,231","286,85,320,213","427,85,546,222","620,85,713,222","796,92,825,214","65,273,117,361","923,65,1000,215","957,217,1000,274","875,65,923,110","205,291,426,336","513,286,719,340","817,272,897,378","8,435,58,572","146,414,356,536","439,399,538,538","617,399,725,538","772,432,930,538"];
    var radius = 70;
    var currentStop;
    var nitroTank;
    var nitroFill;
    var currentSource;
    var currentDestination;
    var halos;
    var sourceAnimation = false;
    var destAnimation = false;
    var sourceFrame = 1;
    var destFrame = 1;
    var clocks;
    var timerText;
    var time;
    var Popup;
    var allQuestions = <%= raw @questions.to_json %>;
    var allAnswers = <%= raw @answers.to_json %>;
    var allCategories = <%= raw @categories.to_json %>;
    var orderOfQuestions = <%= raw (0..@answers.length-1).to_a.shuffle %>;
    var images = <%= raw @images.to_json %>
    var currentImage;
    var currentQuestion = 0;
    var correctAnswer;
    var questionText;
    var blockAnswer;
    var answerText = [];
    var normalStyle; 
    var hoverStyle;
    var correctStyle;
    var wrongStyle;
    var barStyle = { font:"Lobster", fontSize: '30px', fill: '#FFFFFF' };
    var timeStyle = { font:"Exo", fontSize: '28px', fill: '#FFFFFF' };

    function preload() {
        game.load.bitmapFont('desyrel', '<%= asset_path 'desyrel.png' %>', '<%= asset_path 'desyrel.xml' %>');
        game.load.spritesheet('button-start','<%= asset_path 'button-start.png' %>', 401, 143);
        game.load.image('traffic_1', '<%= asset_path 'traffic_1.png' %>');
        game.load.image('traffic_2', '<%= asset_path 'traffic_2.png' %>');
        game.load.image('traffic_3', '<%= asset_path 'traffic_3.png' %>');
        game.load.image('traffic_4', '<%= asset_path 'traffic_4.png' %>');
        game.load.image('white_background', '<%= asset_path 'white_background.png' %>');
        game.load.image('square', '<%= asset_path 'square.png' %>');
        game.load.image('triangle', '<%= asset_path 'triangle.png' %>');
        game.load.image('midan', '<%= asset_path 'midan.png' %>');
        game.load.image('popup',  '<%= asset_path 'Black_button.png' %>');
        game.load.image('car', '<%= asset_path 'car1.png' %>');
        game.load.image('Bar', '<%= asset_path 'Bar.png' %>');
        game.load.image('plate', '<%= asset_path 'plate.png' %>');
        game.load.image('clock', '<%= asset_path 'clock.png' %>');
        game.load.image('timer1','<%= asset_path 'timer1.png' %>');
        game.load.image('timer2','<%= asset_path 'timer2.png' %>');
        game.load.image('timer3','<%= asset_path 'timer3.png' %>');
        game.load.image('nitro_empty','<%= asset_path 'nosbarempty.png' %>');
        game.load.image('nitro_fill_1','<%= asset_path 'nosbarfillimage_1.png' %>');
        game.load.image('nitro_fill_2','<%= asset_path 'nosbarfillimage_2.png' %>');
        game.load.image('nitro_fill_3','<%= asset_path 'nosbarfillimage_3.png' %>');
        game.load.image('nitro_fill_4','<%= asset_path 'nosbarfillimage_4.png' %>');
        game.load.image('nitro_fill_5','<%= asset_path 'nosbarfillimage_5.png' %>');
        game.load.image('street_block', '<%= asset_path 'square-road.png' %>');
        game.load.image('street_line', '<%= asset_path 'line-road.png' %>');
        game.load.image('street_line_2', '<%= asset_path 'line-2-road.png' %>');
        game.load.image('street_round', '<%= asset_path 'turn-road.png' %>');
        game.load.image('street_turn', '<%= asset_path 'turn-2-road.png' %>');
        game.load.image('asfalt', '<%= asset_path 'plain-road.png' %>');
        game.load.image('src_halo_1', '<%= asset_path 'dest1.png' %>');
        game.load.image('src_halo_2', '<%= asset_path 'dest2.png' %>');
        game.load.image('src_halo_3', '<%= asset_path 'dest3.png' %>');
        game.load.image('src_halo_4', '<%= asset_path 'dest4.png' %>');
        game.load.image('dest_halo_1', '<%= asset_path 'circle1.png' %>');
        game.load.image('dest_halo_2', '<%= asset_path 'circle2.png' %>');
        game.load.image('dest_halo_3', '<%= asset_path 'circle3.png' %>');
        game.load.image('dest_halo_4', '<%= asset_path 'circle4.png' %>');

        <% for x in @images %>
        game.load.image('<%= x %>','<%= asset_path x %>');
        <% end %>
    }

    function doNothing(){
        loadingCounter = -1;
    }

    function IntroCreate(){
      start = false;
      startBackground = game.add.sprite(0,0,'white_background');
      startBackground.scale.setTo(4,4);
      loading = game.add.sprite(430,120,'traffic_1');
      setTimeout(loadingAnimation,500);
      game.add.text(350, 0, 'Rules on Wheels', { font:"Lobster", fontSize: '40px', fill: '#000000' });
      loadingText = game.add.text(380, 50, 'loading....', { font:"Lobster", fontSize: '40px', fill: '#000000' });
      WebFontConfig = {
      google: { families: [ 'Exo:600:latin' ] }
      };
      (function() {
      var wf = document.createElement('script');
      wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +
      '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
      wf.type = 'text/javascript';
      wf.async = 'true';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(wf, s);
      })();
     }

    function loadingAnimation(){
        if(loadingCounter == 0){
            game.add.sprite(430,120,'traffic_2');
        }
        if(loadingFrame == 2){
            loadingFrame++;
            loading.destroy();
        }else if(loadingFrame == 3){
            loadingFrame--;
            loading = game.add.sprite(431,198,'traffic_3');
        }
        if(loadingCounter == -1){
            loading = game.add.sprite(430,120,'traffic_4');
            loadingText.text = "   Ready";
            startButton = game.add.button(280,350,'button-start',IntroDestroy,this,1,0,2);
            return;
        }
        loadingCounter++;
        setTimeout(loadingAnimation,350);
    }

    function IntroDestroy(){     
        startButton.destroy();
        create();
    }

    function create() {

    //  We're going to be using physics, so enable the Arcade Physics system
    game.physics.startSystem(Phaser.Physics.ARCADE);

    //  A simple background for our game
    var temp = game.add.sprite(0, 0, 'asfalt');
    temp.scale.setTo(3.5,2);
    //temp.inputEnabled = true;
    //temp.events.onInputDown.add(getCord, this);
    //temp.input.priorityID = 1;
    //temp.input.useHandCursor = true;

    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = game.add.group();

    //  We will enable physics for any object that is created in this group
    platforms.enableBody = true;

    createStreets();
    createAreas();

    sessionTimer = game.add.sprite(180,-45,'timer2');
    sessionTimer.scale.setTo(0.15,0.15);
    sessionText = game.add.text(205,2,'',timeStyle);

    examTimer = game.add.sprite(488,-45,'timer3');
    examTimer.scale.setTo(0.1,0.15);

    speedText = game.add.text(330, 0, 'Score: 0', barStyle);

    // The score
    scoreText = game.add.text(10, 0, 'Score: 0', barStyle);

    // game.add.text(420, 5, 'Nitro: 60', { fontSize: '32px', fill: '#FFFFFF',  });
    msgText = game.add.text(640, 0, 'Get Out!', barStyle);

    timerText = game.add.text(505, 2, '', timeStyle);

    msgText.visible = false;
    //  Our controls.
    cursors = game.input.keyboard.createCursorKeys();

    halos = game.add.group();
    halos.enableBody = true;
    createSource();

    // The car and its settings
    car = game.add.sprite(390,500, 'car');
    car.scale.setTo(0.05,0.05);


    //  We need to enable physics on the car
    game.physics.arcade.enable(car);
    car.body.collideWorldBounds = true;
    car.anchor.setTo(0.3, 0.5);
    createPopup();
    start = true;

    nitroFill = game.add.sprite(755,-37,'nitro_fill_1');
    nitroFill.anchor.setTo(0,0);
    nitroFill.scale.setTo(0.23,0.13);

    nitroTank = game.add.sprite(750,-45,'nitro_empty');
    nitroTank.anchor.setTo(0,0);
    nitroTank.scale.setTo(0.25,0.15);

    setInterval(updateNitro,100)
    setInterval(updateSpeed,100)
    setInterval(displaySessionTime,1000);
}

function createStreets(){

    var street;

    //top right corner cover
    street = platforms.create(820, 42, 'asfalt');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.25,0.2);
    street.body.immovable = true;

    //top right corner lines
    street = platforms.create(830, 63, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90 
    street.scale.setTo(0.13,0.2);
    street.body.immovable = true;

    //2nd midan cover
    street = platforms.create(870, 330, 'asfalt');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.7,0.4);
    street.body.immovable = true;

    street = platforms.create(969, 564, 'street_round');
    street.anchor.setTo(0.5,0.5);
    street.angle += 177
    street.scale.setTo(0.17,0.17);
    street.body.immovable = true;

    street = platforms.create(28, 65, 'street_round');
    street.anchor.setTo(0.5,0.5);
    street.angle += 0
    street.scale.setTo(0.15,0.15);
    street.body.immovable = true;

    //5th vertical, 2nd horizontal
    for(i = 0; i < 2; i++){
    street = platforms.create(932, 397 + i*72, 'street_block');
    street.scale.setTo(0.17,0.19);
    street.body.immovable = true;
    }

    street = platforms.create(85, 500, 'asfalt');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.35,0.35);
    street.body.immovable = true;

    street = platforms.create(95, 310, 'asfalt');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.55,0.3);
    street.body.immovable = true;
    //1st vertical, 2nd horizontal
    street = platforms.create(88, 510, 'street_block');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 17    
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;

    street = platforms.create(67, 440, 'street_block');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 17    
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;

    street = platforms.create(100, 460, 'asfalt');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 17    
    street.scale.setTo(0.07,0.31);
    street.body.immovable = true;

    //6th vertical, 1st horizontal
    street = platforms.create(850, 110, 'street_block');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 28    
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;

    street = platforms.create(887, 178, 'street_block');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 28    
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;
    
    //1st horizontal 
    for(i = 1; i < 10; i++){
    street = platforms.create(25 + i*81, 65, 'street_block');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90
    street.scale.setTo(0.14,0.25);
    street.body.immovable = true;
    }

    //2nd horizontal
    for(i = 0; i < 7; i++){
    street = platforms.create(225 + i*80, 260, 'street_block');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90
    street.scale.setTo(0.17,0.25);
    street.body.immovable = true;
    }

    //3rd horizontal
    for(i = 0; i < 7; i++){
    street = platforms.create(225 + i*80, 370, 'street_block');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90
    street.scale.setTo(0.17,0.25);
    street.body.immovable = true;
    }

    //4th horizontal
    for(i = 0; i < 10; i++){
    street = platforms.create(175 + i*80, 570, 'street_block');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90
    street.scale.setTo(0.14,0.2);
    street.body.immovable = true;
    }

    //1st vertical, 1st horizontal
    for(i = 0; i < 2; i++){
    street = platforms.create(0, 90 + i*70, 'street_block');
    street.scale.setTo(0.14,0.2);
    street.body.immovable = true;
    }

    //2nd vertical, 1st horizontal
    for(i = 0; i < 1; i++){
    street = platforms.create(175, 89 + i*80, 'street_block');
    street.scale.setTo(0.17,0.355);
    street.body.immovable = true;
    }

    //3rd vertical, 1st horizontal
    for(i = 0; i < 1; i++){
    street = platforms.create(360, 89 + i*80, 'street_block');
    street.scale.setTo(0.17,0.355);
    street.body.immovable = true;
    }

    //override u turn lines
    street = platforms.create(423, 290, 'street_block');
    street.scale.setTo(0.23,0.13);
    street.body.immovable = true;

    street = platforms.create(445, 285, 'asfalt');
    street.scale.setTo(0.1,0.08);
    street.body.immovable = true;


    //overide triangle lines
    street = platforms.create(185, 92, 'asfalt');
    street.scale.setTo(0.77,0.24);
    street.body.immovable = true;

    //yellow lines adjacent to triangle
    street = platforms.create(295, 146, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 26
    street.scale.setTo(0.17,0.36);
    street.body.immovable = true;

    //white lines adjacent to triangle
    street = platforms.create(210, 130, 'street_line_2');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 20
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;

    //white lines adjacent to triangle
    street = platforms.create(233, 190, 'street_line_2');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 20
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;    

    //yellow lines adjacent to triangle
    street = platforms.create(368, 170, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle += 21
    street.scale.setTo(0.17,0.35);
    street.body.immovable = true;

    //white lines adjacent to triangle
    street = platforms.create(390, 130, 'street_line_2');
    street.anchor.setTo(0.5,0.5);
    street.angle += 20
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;

      //white lines adjacent to triangle
    street = platforms.create(370, 190, 'street_line_2');
    street.anchor.setTo(0.5,0.5);
    street.angle += 20
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;

    //4th vertical, 1st horizontal
    for(i = 0; i < 2; i++){
    street = platforms.create(540, 89 + i*71, 'street_block');
    street.scale.setTo(0.17,0.176);
    street.body.immovable = true;
    }

    //5th vertical, 1st horizontal
    for(i = 0; i < 2; i++){
    street = platforms.create(720, 89 + i*71, 'street_block');
    street.scale.setTo(0.17,0.176);
    street.body.immovable = true;
    }

    //2nd vertical, 2nd horizontal
    for(i = 0; i < 2; i++){
    street = platforms.create(360, 89 + 310 + i*73, 'street_block');
    street.scale.setTo(0.17,0.185);
    street.body.immovable = true;
    }

    //3rd vertical, 2nd horizontal
    for(i = 0; i < 2; i++){
    street = platforms.create(540, 89 + 310 +  i*73, 'street_block');
    street.scale.setTo(0.17,0.185);
    street.body.immovable = true;
    }

    //4th vertical, 2nd horizontal
    for(i = 0; i < 2; i++){
    street = platforms.create(720, 89 + 310 +  i*73, 'street_block');
    street.scale.setTo(0.16,0.185);
    street.body.immovable = true;
    }

    //innner circle first midan
    street = platforms.create(88, 313, 'street_round');
    street.anchor.setTo(1,1);
    street.angle += 90
    street.scale.setTo(0.14,0.14);
    street.body.immovable = true;

    street = platforms.create(104, 313, 'street_round');
    street.anchor.setTo(1,1);
    street.scale.setTo(0.14,0.14);
    street.body.immovable = true;

    street = platforms.create(83, 314, 'street_round');
    street.anchor.setTo(1,1);
    street.angle += 180
    street.scale.setTo(0.15,0.14);
    street.body.immovable = true;

    street = platforms.create(103, 313, 'street_round');
    street.anchor.setTo(1,1);
    street.angle += 270
    street.scale.setTo(0.14,0.14);
    street.body.immovable = true;

    //overide gezera lines
    street = platforms.create(725, 290, 'asfalt');
    street.scale.setTo(0.1,0.09);
    street.body.immovable = true;

    //overide gezera lines
    street = platforms.create(170, 290, 'asfalt');
    street.scale.setTo(0.1,0.09);
    street.body.immovable = true;

    street = platforms.create(120, 619, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90    
    street.scale.setTo(0.13,0.2);
    street.body.immovable = true;

    street = platforms.create(95, 559, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 17    
    street.scale.setTo(0.13,0.2);
    street.body.immovable = true;

    street = platforms.create(52, 415, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 17    
    street.scale.setTo(0.13,0.23);
    street.body.immovable = true;

    street = platforms.create(160, 475, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.13,0.35);
    street.body.immovable = true;

    street = platforms.create(26, 300, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.13,0.35);
    street.body.immovable = true;

    street = platforms.create(115, 255, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90 
    street.scale.setTo(0.13,0.3);
    street.body.immovable = true;

    street = platforms.create(55, 242, 'asfalt');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.03,0.03);
    street.body.immovable = true;

    street = platforms.create(157, 424, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90 
    street.scale.setTo(0.13,0.1);
    street.body.immovable = true;

    street = platforms.create(300, 114, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90 
    street.scale.setTo(0.13,0.33);
    street.body.immovable = true;

    //top right corner lines
    street = platforms.create(943, 155, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 29   
    street.scale.setTo(0.17,0.85);
    street.body.immovable = true;

    // cover below 2nd midan
    street = platforms.create(860, 410, 'asfalt');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.55,0.05);
    street.body.immovable = true;

    // cover beside triangle midan
    street = platforms.create(870, 220, 'asfalt');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.1,0.05);
    street.body.immovable = true;

    //innner circle 2nd midan
    street = platforms.create(841, 335, 'street_round');
    street.anchor.setTo(1,1);
    street.angle += 90
    street.scale.setTo(0.2,0.2);
    street.body.immovable = true;

    street = platforms.create(879, 329, 'street_round');
    street.anchor.setTo(1,1);
    street.angle -= 20
    street.scale.setTo(0.2,0.2);
    street.body.immovable = true;

    street = platforms.create(840, 317, 'street_round');
    street.anchor.setTo(1,1);
    street.angle += 183
    street.scale.setTo(0.2,0.2);
    street.body.immovable = true;

    street = platforms.create(875, 316, 'street_round');
    street.anchor.setTo(1,1);
    street.angle += 273
    street.scale.setTo(0.2,0.2);
    street.body.immovable = true;

    //right most vertical line
    street = platforms.create(1027, 355, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.17,0.25);
    street.body.immovable = true;

    //gezera lines
    street = platforms.create(760, 315, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.17,0.13);
    street.body.immovable = true;

    //gezera lines
    street = platforms.create(230, 315, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.scale.setTo(0.17,0.13);
    street.body.immovable = true;

    //triangle bottom line
    street = platforms.create(820, 192, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle -= 105
    street.scale.setTo(0.17,0.2);
    street.body.immovable = true;

    //bottom right rectangle top line
    street = platforms.create(857, 455, 'street_line');
    street.anchor.setTo(0.5,0.5);
    street.angle += 90
    street.scale.setTo(0.17,0.38);
    street.body.immovable = true;

}

function createAreas(){
    //1st horizontal row
    var area = platforms.create(18, 65, 'square');
    area.scale.setTo(0.205,0.205);
    area.body.immovable = true;

    area = platforms.create(390, 65, 'square');
    area.scale.setTo(0.2,0.2);
    area.body.immovable = true;

    area = platforms.create(570, 65, 'square');
    area.scale.setTo(0.2,0.2);
    area.body.immovable = true;

    // 2nd horizontal row
    area = platforms.create(440, 287, 'square');
    area.scale.setTo(0.38,0.06);
    area.body.immovable = true;

    area = platforms.create(125, 287, 'square');
    area.scale.setTo(0.4,0.06);
    area.body.immovable = true;

    //3rd horizontal row
    area = platforms.create(60, 380, 'square');
    area.scale.setTo(0.4,0.2);
    area.body.immovable = true;

    area = platforms.create(390, 380, 'square');
    area.scale.setTo(0.2,0.2);
    area.body.immovable = true;

    area = platforms.create(570, 380, 'square');
    area.scale.setTo(0.2,0.2);
    area.body.immovable = true;

    area = platforms.create(730, 405, 'square');
    area.scale.setTo(0.27,0.175);
    area.body.immovable = true;

    // triangles
    area = platforms.create(300, 145, 'triangle');
    area.anchor.setTo(0.5,0.5);
    area.angle += 180
    area.scale.setTo(0.21,0.22);
    area.body.immovable = true;

    area = platforms.create(815, 172, 'triangle');
    area.anchor.setTo(0.5,0.5);
    area.angle += -13
    area.scale.setTo(0.14,0.22);
    area.body.immovable = true;

    // side triangles
    area = platforms.create(-100, 300, 'triangle');
    area.scale.setTo(0.25,0.45);
    area.body.immovable = true;

    area = platforms.create(997, 120, 'triangle');
    area.anchor.setTo(0.5,0.5);
    area.angle += 178
    area.scale.setTo(0.6,0.6);
    area.body.immovable = true;

    // el mayadenn
    area = platforms.create(50, 258, 'midan');
    area.scale.setTo(0.12,0.12);
    area.body.immovable = true;

    area = platforms.create(800, 255, 'midan');
    area.scale.setTo(0.15,0.15);
    area.body.immovable = true;

    //Bar image
    bar = platforms.create(0, 0, 'Bar');
    bar.scale.setTo(1,0.3);
    bar.body.immovable = true;

}

function update() {
    if(!start)
        return;
    if(isGameOver)
        return;

    //  Collide the car and the stars with the platforms
    //game.physics.arcade.collide(car, platforms);
    game.physics.arcade.collide(car, bar);

    //  Checks to see if the car overlaps with any of the stars, if he does call the collectStar function
    game.physics.arcade.overlap(car, currentSource , collectSource, null, this);
    game.physics.arcade.overlap(car, currentDestination , collectDestination, null, this);
    game.physics.arcade.overlap(car, clocks , collectClock, null, this);

    car.body.velocity.x = 0;
    car.body.velocity.y = 0;
    car.body.angularVelocity = 0;
    var move = false;
    var reverse = false;
    //car.angle -= 90;

    directionSpeed = 150;

    if(game.input.keyboard.isDown(Phaser.Keyboard.SHIFT) && nitroLeft > 0 && game.input.keyboard.isDown(Phaser.Keyboard.UP) && Popup.visible == false){
        nitro = true;
    }else{
        nitro = false;
    }

    if (game.input.keyboard.isDown(Phaser.Keyboard.UP) && Popup.visible == false)
    {
        if(speed < 300)
            speed += 3;
        if(speed > 300 && !nitro)
            speed -= 3
        if(inArea()){
            if(speed > 90)
                speed -=9
            if(nitro && speed < 120)
                speed += 9
        }
        if(nitro && speed < 400)
            speed += 3  
        move = true;
    }else if (game.input.keyboard.isDown(Phaser.Keyboard.DOWN) && Popup.visible == false)
    {
        if(speed > -100)
            speed -= 3;
        if(speed > 0)
            speed -= 3
        if(inArea() && speed > 0)
            speed -= 3
        if(inArea() && speed < -40)
            speed += 6
        reverse = true;
    }else{
        if(inArea() && speed > 0)
            speed -= 3
        if(inArea() && speed < 0)
            speed += 3
        if(speed > 0)
            speed -= 3
        if(speed < 0)
            speed += 3
    }

    msgText.visible = false;
    if(inArea()){
        msgText.visible = true;
    }

    directionSpeed += (speed*speed)/(speed*5);

    if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT) && Popup.visible == false)
    {
        if(move){
            car.body.angularVelocity = -directionSpeed ;
        }else if(reverse){
            car.body.angularVelocity = +directionSpeed ;
        }
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT) && Popup.visible == false)
    {
        if(move){
            car.body.angularVelocity = +directionSpeed ;
        }else if(reverse){
            car.body.angularVelocity = -directionSpeed ;
        }    
    }

    game.physics.arcade.velocityFromAngle(car.angle-90, speed, car.body.velocity);  

    //car.angle += 90;
}

function createPopup(){
    Popup = game.add.sprite(game.world.centerX+20, game.world.centerY+30, 'popup');
    Popup.alpha = 0.8;
    Popup.anchor.set(0.5);
    Popup.inputEnabled = true;
    normalStyle = { font: "20px Arial", fill: "#ffffff", wordWrap: true, wordWrapWidth: Popup.width, boundsAlignH : "right", align: "center" };
    hoverStyle = { font: "20px Arial", fill: "#f2d000", wordWrap: true, wordWrapWidth: Popup.width,boundsAlignH : "right", align: "center" };
    wrongStyle = { font: "20px Arial", fill: "#b20000", wordWrap: true, wordWrapWidth: Popup.width,boundsAlignH : "right", align: "center" };
    correctStyle = { font: "20px Arial", fill: "#458B00", wordWrap: true, wordWrapWidth: Popup.width,boundsAlignH : "right", align: "center" };
    //Popup.input.enableDrag();

    //  And click the close button to close it down again
    Popup.scale.setTo(2,1.1);
    answerText[0] = game.add.text(+235, +-50, "Answer 1", normalStyle);
    answerText[0].inputEnabled = true;
    answerText[0].events.onInputDown.add(GiveAnswer, this);
    answerText[0].input.priorityID = 1;
    answerText[0].input.useHandCursor = true;
    answerText[0].events.onInputOver.add(AnswerHoverIn, this);
    answerText[0].events.onInputOut.add(AnswerHoverOut, this);
    answerText[0].anchor.setTo(1,0);
    Popup.addChild(answerText[0]);

    answerText[1] = game.add.text(+235, +20, "Answer 2", normalStyle);
    answerText[1].inputEnabled = true;
    answerText[1].events.onInputDown.add(GiveAnswer, this);
    answerText[1].input.priorityID = 1;
    answerText[1].input.useHandCursor = true;
    answerText[1].events.onInputOver.add(AnswerHoverIn, this);
    answerText[1].events.onInputOut.add(AnswerHoverOut, this);
    answerText[1].anchor.setTo(1,0);
    Popup.addChild(answerText[1]);

    answerText[2] = game.add.text(+235, +90, "Answer 3", normalStyle);
    answerText[2].inputEnabled = true;
    answerText[2].events.onInputDown.add(GiveAnswer, this);
    answerText[2].input.priorityID = 1;
    answerText[2].input.useHandCursor = true;
    answerText[2].events.onInputOver.add(AnswerHoverIn, this);
    answerText[2].events.onInputOut.add(AnswerHoverOut, this);
    answerText[2].anchor.setTo(1,0);
    Popup.addChild(answerText[2]);

    answerText[3] = game.add.text(+235, +160, "Answer 4", normalStyle);
    answerText[3].inputEnabled = true;
    answerText[3].events.onInputDown.add(GiveAnswer, this);
    answerText[3].input.priorityID = 1;
    answerText[3].input.useHandCursor = true;
    answerText[3].events.onInputOver.add(AnswerHoverIn, this);
    answerText[3].events.onInputOut.add(AnswerHoverOut, this);
    answerText[3].anchor.setTo(1,0);
    Popup.addChild(answerText[3]);

    currentImage = game.add.sprite(0,0,'');

    questionText = game.add.text(+150, -200, " Question " + '', hoverStyle);
    questionText.anchor.set(1,0);
    Popup.addChild(questionText);
    NextQuestion()
    Popup.visible = false;
}


function hidePopup(){
    Popup.visible = false;
}


function NextQuestion(){
    blockAnswer = false;
    questionText.text = allQuestions[orderOfQuestions[currentQuestion]];
    for(i = 0; i < 4; i ++){
        answerText[i].text = '';
        answerText[i].setStyle(normalStyle);
    }
    currentImage.destroy();
    currentImage = game.add.sprite(-200,-220,images[orderOfQuestions[currentQuestion]]);
    Popup.addChild(currentImage);
    correctAnswer = parseInt(Math.random()*4);
    answerText[correctAnswer].text = allAnswers[orderOfQuestions[currentQuestion]];
    var r;
    for(i = 0; i < 4; i++){
        if(i != correctAnswer){
            while(true){
                r = parseInt(Math.random()*allAnswers.length);
                var duplicate = false;
                for(j = 0; j < 4; j++){
                    if(allAnswers[r] == answerText[j].text || allCategories[r] != allCategories[correctAnswer])
                        duplicate = true;
                }
                if(!duplicate)
                    break;
            }
            answerText[i].text = allAnswers[r];
        }
    }
    for(ttt = 0; ttt < 4; ttt++){
        answerText[ttt].text = addSpaces(answerText[ttt].text);
    }
    currentQuestion++;
    if(currentQuestion >= allQuestions.length)
        currentQuestion = 0;
}

function getCord(){
    alert(car.x+","+car.y);
}

function createClocks(){
    clocks = game.add.group();
    clocks.enableBody = true;
    clocks.scale.setTo(1,1);
    clocks.create(10,150,'clock');
    clocks.create(550,150,'clock');
    clocks.create(730,150,'clock');
    clocks.create(840,120,'clock');
    clocks.create(180,175,'clock');
    clocks.create(385,175,'clock');
    clocks.create(200,550,'clock');
    clocks.create(450,550,'clock');
    clocks.create(650,550,'clock');
    clocks.create(850,550,'clock');
    clocks.create(200,550,'clock');
    clocks.create(370,450,'clock');
    clocks.create(550,450,'clock');
    clocks.create(90,450,'clock');
    clocks.create(730,450,'clock');
    clocks.create(940,450,'clock');
    clocks.create(150,290,'clock');
    clocks.create(10,290,'clock');
    clocks.create(750,290,'clock');
    clocks.create(930,290,'clock');
    clocks.create(280,240,'clock');
    clocks.create(450,240,'clock');
    clocks.create(650,240,'clock');
    clocks.create(280,350,'clock');
    clocks.create(450,350,'clock');
    clocks.create(650,350,'clock');
    clocks.create(90,40,'clock');
    clocks.create(290,40,'clock');
    clocks.create(470,40,'clock');
    clocks.create(670,40,'clock');
    clocks.sort();
    for(cl = 0; cl < 30; cl++){
        clocks.getChildAt(cl).visible = false;
    }
    for(cl = 0; cl < 28; cl+=3){
        var showClock = parseInt(Math.random()*3);
        clocks.getChildAt(cl+showClock).visible = true;
    }
}

function collectClock(car,clock){
    if(clock.visible == true){
        time+=2;
        timerText.text = '' + time;
        var tempText = game.add.text(clock.x,clock.y,'+2s',{ font:"Lobster", fontSize: '30px', fill: '#e7d94c' });
        setTimeout(function(){ tempText.destroy(); },1500);    
    }
    clock.destroy();
}

function GiveAnswer(answer){
    if(blockAnswer)
        return;
    blockAnswer = true;
    var old = score;
    if(answer.text == allAnswers[orderOfQuestions[currentQuestion-1]])
        score += 50;
    answer.setStyle(wrongStyle);
    answerText[correctAnswer].setStyle(correctStyle);
    scoreText.text = 'Score: ' + score;
    setTimeout(NextQuestion,3500-(45*(score-old)))
}

function AnswerHoverIn(answer){
    if(blockAnswer)
        return;
    answer.setStyle(hoverStyle)
}

function AnswerHoverOut(answer){
    if(blockAnswer)
        return;
    answer.setStyle(normalStyle)
}

function formatAnswer(ans){
    var cutoff = 20;
    var words = ans.split(' ');
    var newAnswer = "";
    var j = 0;
    var line = words[words.length-1];
    for(counter = words.length - 2; counter >= 0 ; counter--){
        if(j < cutoff){
            line = words[counter] + " " + line;
            j += words[counter].length;
        }else{
            if(newAnswer == ""){
                newAnswer = line
            }else{
                newAnswer = line + "\n" + newAnswer; 
            }
            alert("nA:" +newAnswer);
            line = words[counter];
            j = words[counter].length;
        }
        alert(words[i]);
        alert(line);
    }
    if(line.length >0){
        newAnswer = line + "\n" + newAnswer;
    }
    return newAnswer;
}

function addSpaces(ans){
    return ans;
}

function updateNitro(){
    //msgText.visible = false;
    if(nitro){
        nitroLeft -= 1;
        nitroFill.destroy();
        nitroFill = game.add.sprite(755+(100-nitroLeft)/3.8,-37,'nitro_fill_'+(5-parseInt(nitroLeft/20)));
        nitroFill.anchor.setTo(0,0);
        nitroFill.scale.setTo((nitroLeft/100)*0.23,0.13);
        nitroTank.destroy();
        nitroTank = game.add.sprite(750,-45,'nitro_empty');
        nitroTank.anchor.setTo(0,0);
        nitroTank.scale.setTo(0.25,0.15);
        //msgText.visible = true;
    }
}
var newRandom = 9999;
var random;
function createSource(){
    if(time > 0)
        return;
    if(!collected)
        return;
    random = parseInt(Math.random()*stops.length);
    while(random == newRandom){
        random = parseInt(Math.random()*stops.length);;
    }
    var cordinates = stops[random].split(",");
    currentStop = cordinates;
    currentSource = halos.create(parseInt(cordinates[0]),parseInt(cordinates[1]),"src_halo_"+sourceFrame);
    currentSource.anchor.setTo(0.5,0.5);
    currentSource.scale.setTo(0.25,0.25);
    sourceAnimation = true;
    animateSource();
}

function collectSource () {
    if(!inHalo() || speed != 0){
        return;
    }
    sourceAnimation = false;
    currentSource.destroy();
    createDestination();
    startTimer(10);
    createClocks();
}

function animateSource(){
    if(!sourceAnimation)
        return;
    sourceFrame++;
    if(sourceFrame > 4)
        sourceFrame = 1
    currentSource.destroy();
    currentSource = halos.create(parseInt(currentStop[0]),parseInt(currentStop[1]),"src_halo_"+sourceFrame);
    currentSource.anchor.setTo(0.5,0.5);
    currentSource.scale.setTo(0.25,0.25);
    setTimeout(animateSource,70);
}

function animateDestination(){
    if(!destAnimation)
        return;
    destFrame++;
    if(destFrame > 4)
        destFrame = 1
    currentDestination.destroy();
    currentDestination = halos.create(parseInt(currentStop[0]),parseInt(currentStop[1]),"dest_halo_"+destFrame);
    currentDestination.anchor.setTo(0.5,0.5);
    currentDestination.scale.setTo(0.25,0.25);
    setTimeout(animateDestination,70);
}

function inHalo(){
     if(car.x >= (parseInt(currentStop[0]) - radius/2) && car.x <= (parseInt(currentStop[0]) + radius/2) && car.y >= (parseInt(currentStop[1]) - radius) && car.y <= (parseInt(currentStop[1])))
        return true;
     return false;
}

function inArea(){
    for(i = 0; i < slowAreas.length; i++){
        var cordinates = slowAreas[i].split(",");
        if(car.x >= parseInt(cordinates[0]) && car.x <= parseInt(cordinates[2]) && car.y >= parseInt(cordinates[1]) && car.y <= parseInt(cordinates[3]) )
                return true;
    }
    return false;
}

function createDestination(){
    newRandom = parseInt(Math.random()*stops.length);
    collected = false;
    source = false;
    while(random == newRandom){
        newRandom = parseInt(Math.random()*stops.length);;
    }
    var cordinates = stops[newRandom].split(",");
    currentStop = cordinates;
    currentDestination = halos.create(parseInt(cordinates[0]),parseInt(cordinates[1]),"dest_halo_"+destFrame);
    currentDestination.anchor.setTo(0.5,0.5);
    currentDestination.scale.setTo(0.25,0.25);
    destAnimation = true;
    animateDestination();
}

function collectDestination (){
    if(!inHalo() || speed != 0){
        return;
    }
    destAnimation = false;
    currentDestination.destroy();
    Popup.visible = true;
    score += 20*time;
    scoreText.text = 'Score: ' + score;
    collected = true;
    clocks.destroy();
    if(time <= 0){
        startTimer(40);
    }else{
        time+= 40;
    }
}

function startTimer(t){
    time = t;
    updateTimer();
}

function updateTimer(){
    if(time > 0){
        time -= 1;
        timerText.text = '' + time;
        setTimeout(updateTimer,1000);
    }else{
        timerText.text = '';
        createSource();
        hidePopup();
    }
}

function destroyText(text){
    text.destroy();
}

function updateSpeed(){
    speedText.text = 'Speed: ' + speed;
}

function displaySessionTime(){
    sessionTime -=1;
    sessionText.text = parseInt(sessionTime/60)+":"+sessionTime%60;
    if(sessionTime == 0)
        gameOver();
}

function gameOver(){
    startBackground = game.add.sprite(0,0,'white_background');
    startBackground.scale.setTo(4,4);
    game.add.sprite(150,150,'plate');
    game.add.text(300, 10, 'Game Over', { font:"Lobster", fontSize: '90px', fill: '#000000' });
    game.add.text(200, 310, 'Sc or e', { font:"Lobster", fontSize: '90px', fill: '#000000' });
    game.add.text(510, 310, score, { font:"Lobster", fontSize: '90px', fill: '#000000' });
    alert(currentQuestion);
}

</script>
</body>
</html>